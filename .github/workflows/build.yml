name: CI Build Project B (integrating Project A from .library)

on: [workflow_dispatch]

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      # 步骤1: 检出项目B的代码
      - name: Checkout Project B (including Project A in .library/keyd)
        uses: actions/checkout@v4
        with:
          submodules: 'recursive' # 如果 .library/keyd 是 submodule，保留此行；否则它无害但非必需
          persist-credentials: false
          fetch-depth: 0

      # 步骤2: 设置编译项目A所需的环境
      - name: Set up JDK (if Project A/keyd needs it)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android NDK (for Project A/keyd)
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          # **重要**: 请确认 'r28b' 是 nttld/setup-ndk@v1 支持且可下载的 NDK 版本。
          # 你之前用 'r28d' 时遇到过 404 错误。如果 'r28b' 也有问题，请换用一个已知的有效版本，例如 'r26d' 或 'r25c'。
          ndk-version: 'r28b'

      - name: Set NDK_ROOT environment variable
        run: echo "NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      # 步骤3: 编译项目A (keyd)
      - name: Build Project A (keyd)
        # working-directory 设置为项目A (keyd) 的源代码根目录
        working-directory: ./.library/keyd
        run: |
          # 修改了 echo 信息以匹配 working-directory
          echo "Building Project A (keyd) from ./.library/keyd directory..."
          # 假设 Makefile.android 位于 ./.library/keyd/ 目录下
          make -f Makefile.android APP_VERSION="2.5.0-custom-android" NDK_ROOT="${{ env.NDK_ROOT }}"

      # 步骤4: 将项目A (keyd) 的产物复制到项目B的 system/bin 目录
      - name: Copy Project A (keyd) artifact to Project B's system/bin
        run: |
          echo "Creating directory ./system/bin/ if it doesn't exist (in Project B's root)..."
          mkdir -p ./system/bin

          echo "Copying Project A (keyd) artifact..."
          # **非常重要**: 请你务必确认此路径!
          # 这个路径假设 'make' 命令在 './.library/keyd' 目录执行后,
          # 生成的 'keyd' 二进制文件位于 './.library/keyd/bin/keyd'。
          # 如果实际产物路径是 './.library/keyd/keyd' (即直接在工作目录下)，
          # 则应修改为: cp ./.library/keyd/keyd ./system/bin/keyd
          cp ./.library/keyd/bin/keyd ./system/bin/keyd
          
          echo "Project A (keyd) artifact copied to ./system/bin/keyd"
          ls -l ./system/bin

      # --- 下面是项目B原有的步骤 ---
      - name: Get version from Project B's update.json
        id: version
        # **修复 set-output 警告**: 将 @master 替换为最新的稳定版本标签
        # 请查找 notiz-dev/github-action-json-property 的最新稳定版本 (例如 v0.4.0 或更高)
        uses: notiz-dev/github-action-json-property@v0.4.0 # <--- 修改这里，使用具体版本号
        with:
            path: 'update.json'
            prop_path: 'version'

      - name: Archive Project B (includes keyd from Project A)
        run: |
          echo "Archiving Project B contents..."
          # 打包当前目录所有内容，并排除 .git 和 .github 目录
          sudo zip -r KSU-Keyd.zip . -x ".git/*" -x ".github/*"

      - name: Release Project B
        uses: meeDamian/github-release@v2.0.1 # 使用具体版本是好的
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version.outputs.prop }}
          name: ${{ steps.version.outputs.prop }}
          body: Please check [changelog](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md) for changes
          files: KSU-Keyd.zip
          gzip: false
          draft: false
          prerelease: false
          allow_override: true

      - name: Cleanup
        run: |
          rm KSU-Keyd.zip
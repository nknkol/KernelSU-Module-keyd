name: CI Build Project B (integrating Project A from .library)

on: [workflow_dispatch]

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      # 步骤1: 检出项目B的代码
      # 由于项目A (keyd) 在项目B的 '.library' 文件夹中，
      # 正常的 checkout 就会包含项目A的源代码。
      # 如果 '.library' 是一个 Git submodule，则需要 'submodules: recursive'
      - name: Checkout Project B (including Project A in .library)
        uses: actions/checkout@v4
        with:
          submodules: 'recursive' # 如果 .library 是 submodule，则保留此行；否则可以移除
          persist-credentials: false
          fetch-depth: 0

      # 步骤2: 设置编译项目A所需的环境
      - name: Set up JDK (if Project A/keyd needs it)
        uses: actions/setup-java@v4
        with:
          java-version: '17' # 根据需要调整
          distribution: 'temurin'

      - name: Setup Android NDK (for Project A/keyd)
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: 'r28b' # 根据keyd项目的需要调整

      - name: Set NDK_ROOT environment variable
        run: echo "NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      # 步骤3: 编译项目A (keyd)
      # working-directory 设置为包含项目A (keyd) 源代码的 .library 目录
      - name: Build Project A (keyd)
        working-directory: ./.library/keyd # 项目A (keyd) 的源代码在 .library 文件夹中
        run: |
          echo "Building Project A (keyd) from ./.library directory..."
          make -f Makefile.android APP_VERSION="2.5.0-custom-android" NDK_ROOT="${{ env.NDK_ROOT }}"

      # 步骤4: 将项目A (keyd) 的产物复制到项目B的 system/bin 目录
      - name: Copy Project A (keyd) artifact to Project B's system/bin
        run: |
          echo "Creating directory ./system/bin/ if it doesn't exist (in Project B's root)..."
          mkdir -p ./system/bin # 在项目B的根目录下创建 system/bin

          echo "Copying Project A (keyd) artifact..."
          cp ./.library/keyd/bin/keyd ./system/bin/keyd  # <--- 源路径需要你确认和修改!
          
          echo "Project A (keyd) artifact copied to ./system/bin/keyd"
          ls -l ./system/bin # 显示一下复制结果

      # --- 下面是项目B原有的步骤 (Get version, Archive, Release, Cleanup) ---
      - name: Get version from Project B's update.json
        id: version
        uses: notiz-dev/github-action-json-property@master
        with:
            path: 'update.json'
            prop_path: 'version'

      - name: Archive Project B (includes keyd from Project A)
        run: |
          echo "Archiving Project B contents..."
          # 这个zip命令会打包当前工作目录的所有内容，包括 ./system/bin/keyd
          sudo zip -r KSU-Keyd.zip . -x ".git/*" -x ".github/*" # 排除 .git 和 .github

      - name: Release Project B
        uses: meeDamian/github-release@master # 建议使用具体版本
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version.outputs.prop }}
          name: ${{ steps.version.outputs.prop }}
          body: Please check [changelog](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md) for changes
          files: KSU-Keyd.zip
          gzip: false
          draft: false
          prerelease: false
          allow_override: true

      - name: Cleanup
        run: |
          rm KSU-Keyd.zip